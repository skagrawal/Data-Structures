/**
 * 
 */
package ska.coms535.BloomFilter;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;

/**
 * @author Shubham
 *
 */
public class FalsePositives {

	private static final int[][] expInputVals = new int[10][3];

	static{
		expInputVals[0][0] = 2; expInputVals[0][1] = 10; expInputVals[0][2] = 100;
		expInputVals[1][0] = 2; expInputVals[1][1] = 20; expInputVals[1][2] = 200;
		expInputVals[2][0] = 4; expInputVals[2][1] = 10; expInputVals[2][2] = 100;
		expInputVals[3][0] = 4; expInputVals[3][1] = 20; expInputVals[3][2] = 200;
		expInputVals[4][0] = 4; expInputVals[4][1] = 30; expInputVals[4][2] = 500;
		expInputVals[5][0] = 4; expInputVals[5][1] = 40; expInputVals[5][2] = 1000;
		expInputVals[6][0] = 8; expInputVals[6][1] = 10; expInputVals[6][2] = 100;
		expInputVals[7][0] = 8; expInputVals[7][1] = 20; expInputVals[7][2] = 200;
		expInputVals[8][0] = 8; expInputVals[8][1] = 30; expInputVals[8][2] = 500;
		expInputVals[9][0] = 8; expInputVals[9][1] = 40; expInputVals[9][2] = 1000;
	}

	public static void main(String[] args)
	{

		System.out.println("BloomFilterDet:");
		double bloomFilterDetFPR = 0.0;
		double bloomFilterDetFPR_theory = 0.0;
		for(int i =0 ; i< 10; i++){

			int k = expInputVals[i][0];
			int m = expInputVals[i][1];
			int n = expInputVals[i][2];

			BloomFilterDet bf=  new BloomFilterDet(m, k);

			List<String> input = getRandomSet(n);
			for(String str : input){
				bf.add(str);
			}
			int fpCount = 0;
			for(int j =0 ; j < n; j++);{
				//Generating a random String that does not exist in the input set
				StringBuilder random = null;
				do{
					random = new StringBuilder(input.get(objRandom.nextInt(input.size())));
					random.append((char)(97 + objRandom.nextInt(26)));
				}while(input.contains(random.toString()));

				if(bf.appears(random.toString())){
					fpCount++;
				}
			}
			bloomFilterDetFPR += (fpCount / (double) n);
			bloomFilterDetFPR_theory += Math.pow(0.618, k); 
			

			System.out.println("[ " +bf.numHashes() +" , " +m +" , " +n+" ] : " 
					+(fpCount/(double)n));
		}
		bloomFilterDetFPR /= 10;
		System.out.println("BloomFilterRan:");
		double bloomFilterRanFPR = 0.0;
		double bloomFilterRanFPR_theory = 0.0;
		for(int i =0 ; i< 10; i++){
			//Small Experiments for Bloom Filter Det start here
			//Let us call it k. Although it indirectly relates to k.
			int k = expInputVals[i][0];
			int m = expInputVals[i][1];
			int n = expInputVals[i][2];
			List<String> inputString = getRandomSet(n);
			BloomFilterRan objBloomFilter=  new BloomFilterRan(m, k);
			for(String str : inputString){
				objBloomFilter.add(str);
			}
			int fpCount = 0;
			for(int j =0 ; j < n; j++);{
				//Generating a random String that does not exist in the input set
				StringBuilder randomString = null;
				do{
					randomString = new StringBuilder(inputString.get(objRandom.nextInt(inputString.size())));
					randomString.append((char)(97 + objRandom.nextInt(26)));
				}while(inputString.contains(randomString.toString()));

				if(objBloomFilter.appears(randomString.toString())){
					fpCount++;
				}
			}
			bloomFilterRanFPR += (fpCount / (double)n);
			bloomFilterRanFPR_theory += Math.pow(0.618, k);
			// Outputting the actual k , m values for readability
			System.out.println("[ " +objBloomFilter.numHashes() +" , " +m +" , " +n +" ] : " 
					+(fpCount/(double)n));
		} 
		bloomFilterRanFPR /= 10;

		System.out.println("Average False Positive Rate For BloomFilterDet : " +bloomFilterDetFPR);
		System.out.println("\t Theoretical Value: " +bloomFilterDetFPR_theory/10.0);
		System.out.println("Average False Positive Rate For BloomFilterRan: " +bloomFilterRanFPR);
		System.out.println("\t Theoretical Value: " +bloomFilterRanFPR_theory/10.0);
	}

	/**
	 * Generates list of input size out of the random strings generated by function getRandomString()
	 * @param setSize: size of list
	 * @return retList: the list of random strings
	 */
	public static List<String> getRandomSet(int setSize){
		List<String> retList=  new ArrayList<String>(setSize);
		for(int i =0; i < setSize; i++){
			retList.add(getRandomString(objRandom.nextInt(99) + 1));
		}
		return retList;
	}

	private static final Random objRandom = new Random();

	/**
	 * Generates random strings of given length.
	 * @param length: length of string to be generated.
	 * @return String(arrChar): returns random string generated.
	 */
	public static String getRandomString(int length){
		char[] arrChar = new char[length];
		for(int i = 0; i < length; i++){
			arrChar[i] = (char) (97 +objRandom.nextInt(26));
		}
		return new String(arrChar);
	}
}

